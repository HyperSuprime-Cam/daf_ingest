#<?cfg paf policy ?>

# Following is required for ORCA; we are hand orchestrating - see README
#requires: {
#   database: {
#      type: MySQL
#   }
#   platform: {
#      minCoreCount: 1
#   }
#}
#
#framework: {
#   type: standard
#   environment: "$DATAREL_DIR/etc/setup.sh"
#   exec: "$PEX_HARNESS_DIR/bin/launchPipeline.sh"
#}

execute: {
   # To run in nonMPI setup: add 'nSlices: 1' else need file: nodelist.src
   nSlices: 1
   # To terminate after predetermined count: add 'executionMode: "oneloop"'
   executionMode: "oneloop"
   # To be quite verbose: add 'logThreshold: -3'
   #logThreshold: -3
   localLogMode: true
   eventBrokerHost: "lsst8.ncsa.uiuc.edu"
   shutdownTopic: shutdownISR
   dir: {
      shortName: ISR
      defaultRoot: .
      # Path to root Run directory
      # runDirPattern: "../../%(runid)s/%(shortname)s"
      # runDirPattern: "../../../"
      runDirPattern: "."
      work: work
      input: input
      output: output
      update: update
      scratch: scratch
   }

   appStage: {
      name: "000-isrGetajob"
      parallelClass: "lsst.ctrl.sched.pipeline.GetAJobParallelProcessing"
      eventTopic: "None"
      stagePolicy: @000-isrGetajob.paf
   }

   appStage: {
      name: "010-Input"
      parallelClass: "lsst.pex.harness.IOStage.InputStageParallel"
      eventTopic: "None"
      stagePolicy: @010-ImSim-Input.paf
   }

# This stage is not implemented in DC3b PT1
#   appStage: {
#      name: "030-isrLinearity"
#      parallelClass: "lsst.ip.pipeline.IsrLinearityStageParallel"
#      eventTopic: "None"
#      stagePolicy: @030-isrLinearity.paf
#   }

   appStage: {
      name: "040-isrSaturation"
      parallelClass: "lsst.ip.pipeline.IsrSaturationStageParallel"
      eventTopic: "None"
      stagePolicy: @040-isrSaturation.paf
   }

   appStage: {
      name: "050-isrOverscan"
      parallelClass: "lsst.ip.pipeline.IsrOverscanStageParallel"
      eventTopic: "None"
      stagePolicy: @050-isrOverscan.paf
   }

   appStage: {
      name: "060-isrBias"
      parallelClass: "lsst.ip.pipeline.IsrBiasStageParallel"
      eventTopic: "None"
      stagePolicy: @060-isrBias.paf
   }

   appStage: {
      name: "070-isrDark"
      parallelClass: "lsst.ip.pipeline.IsrDarkStageParallel"
      eventTopic: "None"
      stagePolicy: @070-isrDark.paf
   }

   appStage: {
      name: "080-isrFlat"
      parallelClass: "lsst.ip.pipeline.IsrFlatStageParallel"
      eventTopic: "None"
      stagePolicy: @080-isrFlat.paf
   }

# This stage is not implemented in DC3b PT1
#  appStage: {
#     name: "090-isrFringe"
#     parallelClass: "lsst.ip.pipeline.IsrFringeStageParallel"
#     eventTopic: "None"
#     stagePolicy: @090-isrFringe.paf
#  }


   appStage: {
      name: "100-isrExposureOutput"
      parallelClass: "lsst.pex.harness.IOStage.OutputStageParallel"
      eventTopic: "None"
      stagePolicy: @100-isrExposureOutput.paf
   }

#============================================================================
#                   Need once correctly running through ISR algorithms
#   appStage: {
#      name: "110-isrSdqa"
#      parallelClass: "lsst.sdqa.pipeline.IsrSdqaStageParallel"
#      eventTopic: "None"
#      stagePolicy: @110-isrSdqa.paf
#   }
#
#   appStage: {
#      name: "120-isrSdqaOutput"
#      parallelClass: "lsst.pex.harness.IOStage.OutputStageParallel"
#      eventTopic: "None"
#      stagePolicy: @120-isrSdqaOutput.paf
#   }

#============================================================================
#                   Need when hooking up to CcdAssembly
   appStage: {
      name: "130-isrJobdone"
      parallelClass: "lsst.ctrl.sched.pipeline.JobDoneParallelProcessing"
      eventTopic: "None"
      stagePolicy: @130-isrJobdone.paf
   }

   failureStage: {
      name: "140-isrFailure"
      parallelClass: "lsst.ctrl.sched.pipeline.JobDoneParallelProcessing"
      eventTopic: "None"
      stagePolicy: @140-isrFailure.paf
   }
#============================================================================

}
