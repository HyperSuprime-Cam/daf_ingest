README - 9 April 2010  RAA

Proper integration of isrDefect into the master.paf has not been done.
Need to check that the input/output blocks are correct for its use.

Simon said something about needing to get saturated defects from a cache.


README  last modified: 20 April 2010 RAA
-------
See end for current method of running joboffice/butler harness pipeline

=============================================================================
datarel  ISR/harness example
=============================================================================


=============================================================================
What I'm really doing at the moment for initial startup
=============================================================================

Setup Environment
------------------

Most activity is done in local copy of: datarel/pipeline/ISR/harness.

0. cd datarel; setup -r .

1.1 Acquire, build, make current, then setup local versions of modules which 
   do NOT have policies loaded in the system packages:
   * definitely need for sdqa (tagged and ready) ctrl_sched (fixed in trunk) ; 
	% setup ctrl_sched  
	% setup sdqa 
   * may need more but I routinely access some packages in local mode

1.2 Acquire, build, make current, then setup local versions of obs_lsstSim
    (until version with uses channel specs that same as raft specs is installed)
    % setup obs_lsstSim


2. Setup where your actual files are found or to be archived:
    I setup master.paf to have: 
	runDirPattern: "../../../"
   Then in datarel, I've created the misc output directories;
         mkdir -p output work update scratch
   Since I wanted to avoid accidentally damaging the system area, I also
   copied over the ImSim directory
         cp  -pr /lsst/DC3/data/afwdata/trunk/ImSim input
   But you could also sym link it.
         ln -s /lsst/DC3/data/afwdata/trunk/ImSim input

-------------------------------
# Nicely bundled for one click use:
cd ~/DC3b/DMS_trunk/datarel
setup -r .
setup ctrl_sched ctrl_sched_trunk
setup sdqa sdqa_trunk
setup obs_lsstSim obs_lsstSim_trunk
ls -ald input
ls input
mkdir -p work scratch update output
which sendevent.py
cd  pipeline/CcdAssembly/harness
-----------------------------------------

Running the Pipeline
----------------------
Window One: 
-----------
rm Pipeline.log Slice0.log calibRegistry.sqlite3 registry.sqlite3 boobie
launchPipeline.py master.paf Run2 CA -v | & tee boobie


From the output of the launched pipeline, capture the number in "originatorId=#"
it will be used in the second window when sending the 'data available' event

Window Two:
-----------
When pipeline output in Window One says "Told JobOffice, I'm ready!",
send the  event providing the details of the specific input data to use.

To assemble the first image:

sendevent.py -r Run2 -n CA -b lsst8  -O \
"postISRCCD visit=85751839 sensor=S:1,1 raft=R:2,3 snap=0" assign CaJob \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,0 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,1 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,2 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,3 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,4 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,5 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,6 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,7 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,0 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,1 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,2 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,3 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,4 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,5 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,6 snap=0" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,7 snap=0"  -o 

.......................................... fill in the # after the -o .....


To assemble the second image:

sendevent.py -r Run2 -n CA -b lsst8 -O \
"postISRCCD visit=85751839 sensor=S:1,1 raft=R:2,3 snap=1" assign CaJob \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,0 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,1 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,2 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,3 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,4 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,5 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,6 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:0,7 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,0 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,1 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,2 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,3 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,4 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,5 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,6 snap=1" \
"postISR visit=85751839 sensor=S:1,1 raft=R:2,3 channel=C:1,7 snap=1"  -o


Note:  can not break the long line right before '-O' --must be after or
get multiple dataset complaint. Also, can not break within quoted string or 
will get embedded newline (which then is also interpreted as multiple output 
datasets).

Note: contrary to doco, '-o' at end of command is OK; easier for mousey-click.

