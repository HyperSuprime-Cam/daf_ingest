#<?cfg paf policy ?>

#requires: {
#   database: {
#      type: MySQL
#   }
#   platform: {
#      minCoreCount: 1
#   }
#}
#
#framework: {
#   type: standard
#   environment: "$DATAREL_DIR/etc/setup.sh"
#   exec: "$PEX_HARNESS_DIR/bin/launchPipeline.sh"
#}

execute: {
   # To terminate after predetermined count: add 'executionMode: "oneloop"'
   executionMode: oneloop
   # To run in nonMPI setup: add 'nSlices: 1' else need file: nodelist.src
   nSlices: 1
   localLogMode: true
   # To be quite verbose: add 'logThreshold: -3'
   logThreshold: -3
   eventBrokerHost: "lsst8.ncsa.uiuc.edu"
   shutdownTopic: shutdownCcdAssembly
   dir: {
      shortName: CA
      defaultRoot: .
      #runDirPattern: "../../%(runid)s/%(shortname)s"
      runDirPattern: "../../../"
      work: input
      input: input
      output: input
      update: input
      scratch: input
   }

   appStage: {
      name: "lsst.ctrl.sched.pipeline.GetAJob"
      parallelClass: "lsst.ctrl.sched.pipeline.GetAJobParallelProcessing"
      eventTopic: "None"
      stagePolicy: @000-getajob.paf
   }

   appStage: {
      name: "lsst.pex.harness.IOStage.InputStage"
      parallelClass: "lsst.pex.harness.IOStage.InputStageParallel"
      eventTopic: "None"
      stagePolicy: @010-input.paf
   }

   appStage: {
      name: "lsst.ip.pipeline.IsrCcdAssemblyStage"
      parallelClass: "lsst.ip.pipeline.IsrCcdAssemblyStageParallel"
      eventTopic: "None"
      stagePolicy: @020-assembleCcd.paf
   }

# This stage is not yet integrated into CCD Assembly pipeline
#   appStage: {
#      name: "lsst.ip.pipeline.IsrDetectStage"
#      parallelClass: "lsst.ip.pipeline.IsrDetectStageParallel"
#      eventTopic: "None"
#      stagePolicy: @030-isrDefect.paf
#   }

   appStage: {
      name: "lsst.pex.harness.IOStage.OutputStage"
      parallelClass: "lsst.pex.harness.IOStage.OutputStageParallel"
      eventTopic: "None"
      stagePolicy: @040-output.paf
   }

}
